// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicProject.DataLayer.Context;

namespace MusicProject.DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicProject.Entities.Comment.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ContentLength");

                    b.Property<string>("ContentType");

                    b.Property<DateTimeOffset?>("CreatDateTime");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsValid");

                    b.Property<string>("Link");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("MusicProject.Entities.Comment.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("Dislike");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("IsPublished");

                    b.Property<int>("Like");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<int?>("ParentId");

                    b.Property<string>("Tell")
                        .HasMaxLength(11);

                    b.Property<int>("TypeId");

                    b.Property<int>("UserCommentId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserCommentId");

                    b.ToTable("Comments","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutUs");

                    b.Property<string>("CafebazarLink");

                    b.Property<string>("ChangeLog");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Instagram");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Site");

                    b.Property<string>("Soundcloud");

                    b.Property<string>("Telegram");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("AppSettings","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentText");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DatePublished");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublish");

                    b.Property<bool?>("IsSelected");

                    b.Property<int>("LikeCount");

                    b.Property<string>("Link");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Pic")
                        .HasMaxLength(800);

                    b.Property<DateTimeOffset?>("PublishDateTime");

                    b.Property<string>("SeoDescription");

                    b.Property<string>("SeoKeyboard");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(350);

                    b.Property<int>("TypeId");

                    b.Property<int>("VisitCount");

                    b.Property<string>("ZipMp3128");

                    b.Property<string>("ZipMp3128Size");

                    b.Property<string>("ZipMp3320");

                    b.Property<string>("ZipMp3320Size");

                    b.Property<string>("ZipMp364");

                    b.Property<string>("ZipMp364Size");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categorys","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.CategoryComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("CommentId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommentId");

                    b.ToTable("CategoryComments","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.CategoryTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("TagId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("CategoryTags","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Email");

                    b.Property<string>("Message");

                    b.Property<string>("Mobile");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("ContactUs","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("ContentText");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("HeadLine")
                        .HasMaxLength(500);

                    b.Property<bool>("IsArchive");

                    b.Property<string>("Lead")
                        .HasMaxLength(1500);

                    b.Property<int>("LikeCount");

                    b.Property<string>("Link");

                    b.Property<string>("MediumPic");

                    b.Property<string>("MediumPic2");

                    b.Property<string>("MediumPic3");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Mp3128");

                    b.Property<string>("Mp3320");

                    b.Property<string>("Mp364");

                    b.Property<byte[]>("Music");

                    b.Property<string>("Pdf");

                    b.Property<string>("Pic");

                    b.Property<string>("Pic2");

                    b.Property<string>("Pic3");

                    b.Property<int>("Priority");

                    b.Property<DateTimeOffset?>("PublishDateTime");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500);

                    b.Property<string>("SeoKeyboard")
                        .HasMaxLength(500);

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(500);

                    b.Property<string>("SeoUrl")
                        .HasMaxLength(500);

                    b.Property<string>("SubTitle")
                        .HasMaxLength(500);

                    b.Property<string>("Svg");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Thumbnail2");

                    b.Property<string>("Thumbnail3");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("TypeId");

                    b.Property<string>("Video");

                    b.Property<int>("VisitCount");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Contents","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<int>("ContentId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentComments","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId");

                    b.Property<string>("ContentText");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Ext");

                    b.Property<string>("FileName");

                    b.Property<string>("FileName2");

                    b.Property<string>("FileName3");

                    b.Property<long>("FileSize");

                    b.Property<long>("FileSize2");

                    b.Property<long>("FileSize3");

                    b.Property<bool?>("IsPublish");

                    b.Property<bool?>("IsSelected");

                    b.Property<int>("LikeCount");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Pic");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(500);

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<int>("VisitCount");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentFiles","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DatePublished");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublish");

                    b.Property<int>("LikeCount");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Pic");

                    b.Property<DateTimeOffset?>("PublishDateTime");

                    b.Property<string>("Remix");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<int>("VisitCount");

                    b.Property<string>("ZipMp3128");

                    b.Property<string>("ZipMp3128Size");

                    b.Property<string>("ZipMp3320");

                    b.Property<string>("ZipMp3320Size");

                    b.Property<string>("ZipMp364");

                    b.Property<string>("ZipMp364Size");

                    b.HasKey("Id");

                    b.ToTable("ContentLists","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentListComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<int>("ContentListId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ContentListId");

                    b.ToTable("ContentListComments","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentListFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentListId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Ext");

                    b.Property<long>("FileSize");

                    b.Property<int>("LikeCount");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Mp3128");

                    b.Property<string>("Mp3320");

                    b.Property<string>("Mp364");

                    b.Property<int>("Order");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<int>("VisitCount");

                    b.HasKey("Id");

                    b.HasIndex("ContentListId");

                    b.ToTable("ContentListFiles");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentListTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentListId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("TagId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContentListId");

                    b.HasIndex("TagId");

                    b.ToTable("ContentListTags","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("Priority");

                    b.Property<int>("RelatedId");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("RelatedId");

                    b.ToTable("ContentRelateds","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId");

                    b.Property<int>("ContentListId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("Order");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentListId");

                    b.ToTable("ContentSelecteds","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("TagId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("TagId");

                    b.ToTable("ContentTags","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveCode");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DeviceId");

                    b.Property<string>("FirebaseToken");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Phone");

                    b.Property<bool>("PhoneConfirm");

                    b.Property<string>("Token");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Main", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Link");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Music");

                    b.Property<string>("SubTitle");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Mains","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Budget");

                    b.Property<string>("Count");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Email");

                    b.Property<string>("File");

                    b.Property<string>("FrameCount");

                    b.Property<string>("HasEdit");

                    b.Property<string>("HasSenario");

                    b.Property<string>("HasSpeecher");

                    b.Property<string>("Level");

                    b.Property<string>("Mobile");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.Property<string>("OrderType");

                    b.Property<string>("Place");

                    b.Property<string>("ProjectDuration");

                    b.Property<string>("Senario");

                    b.Property<string>("Speecher");

                    b.Property<string>("Subject");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.ToTable("Orders","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentText");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("DatePublished");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublish");

                    b.Property<int>("LikeCount");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Pic");

                    b.Property<DateTimeOffset?>("PublishDateTime");

                    b.Property<string>("SeoDescription");

                    b.Property<string>("SeoKeyboard");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.Property<int>("TypeId");

                    b.Property<string>("Video");

                    b.Property<int>("VisitCount");

                    b.HasKey("Id");

                    b.ToTable("Podcasts","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.PodcastComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("PodcastId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastComments","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.PodcastTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("PodcastId");

                    b.Property<int>("TagId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.HasIndex("TagId");

                    b.ToTable("PodcastTags","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.SessionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Email");

                    b.Property<string>("Job");

                    b.Property<string>("Mobile");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name");

                    b.Property<bool>("Newsletter");

                    b.Property<string>("Phone");

                    b.Property<bool>("SendSms");

                    b.Property<string>("SessionDate");

                    b.Property<string>("SessionTime");

                    b.Property<string>("ShopName");

                    b.Property<string>("ShopTell");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.ToTable("SessionRequests","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Link");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Pic");

                    b.Property<string>("State");

                    b.Property<string>("SubTitle");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("Sliders","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChildCount");

                    b.Property<string>("Content");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("EnglishTitle");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagram");

                    b.Property<bool>("IsPublish");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Itunes");

                    b.Property<int>("LikeCount");

                    b.Property<string>("Link");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Pic");

                    b.Property<string>("SeoDescription");

                    b.Property<string>("SeoKeyword");

                    b.Property<string>("Soundcloud");

                    b.Property<string>("Spotify");

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title");

                    b.Property<string>("Twitter");

                    b.Property<string>("Type");

                    b.Property<int>("VisitCount");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Tags","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.TagComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("TagId");

                    b.ToTable("TagComments","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.AppDataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName");

                    b.Property<string>("XmlData");

                    b.HasKey("Id");

                    b.HasIndex("FriendlyName")
                        .IsUnique()
                        .HasFilter("[FriendlyName] IS NOT NULL");

                    b.ToTable("AppDataProtectionKeys","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.AppLogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<int>("EventId");

                    b.Property<string>("LogLevel");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("StateJson");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("AppLogItems","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.AppSqlCache", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(449);

                    b.Property<DateTimeOffset?>("AbsoluteExpiration");

                    b.Property<DateTimeOffset>("ExpiresAtTime");

                    b.Property<long?>("SlidingExpirationInSeconds");

                    b.Property<byte[]>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAtTime")
                        .HasName("Index_ExpiresAtTime");

                    b.ToTable("AppSqlCache","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.CustomUserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Token");

                    b.Property<DateTimeOffset>("TokenExpiresDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomUserTokens","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ActivationCode")
                        .HasMaxLength(5);

                    b.Property<DateTimeOffset?>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(450);

                    b.Property<bool?>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEmailPublic");

                    b.Property<string>("LastName")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("LastVisitDateTime");

                    b.Property<string>("Location");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoFileName")
                        .HasMaxLength(450);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserUsedPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTimeOffset?>("CreatedDateTime");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ModifiedByBrowserName")
                        .HasMaxLength(1000);

                    b.Property<string>("ModifiedByIp")
                        .HasMaxLength(255);

                    b.Property<int?>("ModifiedByUserId");

                    b.Property<DateTimeOffset?>("ModifiedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserUsedPasswords","dbo");
                });

            modelBuilder.Entity("MusicProject.Entities.Comment.Comment", b =>
                {
                    b.HasOne("MusicProject.Entities.Comment.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("MusicProject.Entities.Comment.Comment", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Comments_Comments");

                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Category", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Categorys_Categorys");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.CategoryComment", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Category", "Category")
                        .WithMany("CategoryComments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Comment.Comment", "Comment")
                        .WithMany("CategoryComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.CategoryTag", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Category", "Category")
                        .WithMany("CategoryTags")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryTags_Categories")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.Tag", "Tag")
                        .WithMany("CategoryTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_CategoryTags_Tags")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Content", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Contents_Categorys")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentComment", b =>
                {
                    b.HasOne("MusicProject.Entities.Comment.Comment", "Comment")
                        .WithMany("ContentComments")
                        .HasForeignKey("CommentId");

                    b.HasOne("MusicProject.Entities.Content.Content", "Content")
                        .WithMany("ContentComments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentFile", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Content", "Content")
                        .WithMany("ContentFiles")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK_ContentFiles_Contents")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentListComment", b =>
                {
                    b.HasOne("MusicProject.Entities.Comment.Comment", "Comment")
                        .WithMany("ContentListComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.ContentList", "ContentList")
                        .WithMany("ContentListComments")
                        .HasForeignKey("ContentListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentListFile", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.ContentList", "ContentList")
                        .WithMany("ContentListFiles")
                        .HasForeignKey("ContentListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentListTag", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.ContentList", "ContentList")
                        .WithMany("ContentListTags")
                        .HasForeignKey("ContentListId")
                        .HasConstraintName("FK_ContentListTags_ContentLists")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.Tag", "Tag")
                        .WithMany("ContentListTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_ContentListTags_Tags")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentRelated", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Content", "Content")
                        .WithMany("ContentRelatedsContent")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK_ContentRelateds_Contents");

                    b.HasOne("MusicProject.Entities.Content.Content", "Related")
                        .WithMany("ContentRelatedsContentRelated")
                        .HasForeignKey("RelatedId")
                        .HasConstraintName("FK_ContentRelateds_Contents1");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentSelected", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Content", "Content")
                        .WithMany("ContentSelecteds")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK_ContentSelecteds_Contents")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.ContentList", "ContentList")
                        .WithMany("ContentSelecteds")
                        .HasForeignKey("ContentListId")
                        .HasConstraintName("FK_ContentSelecteds_ContentLists")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.ContentTag", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Content", "Content")
                        .WithMany("ContentTags")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK_ContentTags_Contents")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.Tag", "Tag")
                        .WithMany("ContentTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_ContentTags_Tags")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.Device", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MusicProject.Entities.Content.PodcastComment", b =>
                {
                    b.HasOne("MusicProject.Entities.Comment.Comment", "Comment")
                        .WithMany("PodcastComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.Podcast", "Podcast")
                        .WithMany("PodcastComments")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.PodcastTag", b =>
                {
                    b.HasOne("MusicProject.Entities.Content.Podcast", "Podcast")
                        .WithMany("PodcastTags")
                        .HasForeignKey("PodcastId")
                        .HasConstraintName("FK_PodcastTags_Podcasts")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.Tag", "Tag")
                        .WithMany("PodcastTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_PodcastTags_Tags")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Content.TagComment", b =>
                {
                    b.HasOne("MusicProject.Entities.Comment.Comment", "Comment")
                        .WithMany("TagComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Content.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.CustomUserToken", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("CustomUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MusicProject.Entities.Identity.UserUsedPassword", b =>
                {
                    b.HasOne("MusicProject.Entities.Identity.User", "User")
                        .WithMany("UserUsedPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
